Date: 17 July 2013 06:30
Categories: projects/npms/httperfjs, projects, project/npms, httperf, nodejs, benchmarking
Summary: I covered this in the [HTTPerf.js README](/projects/npms/httperfjs) a bit, but wanted to take a deer look at how I'm using [HTTPerf.js](/projects/npms/httperfjs) to benchmark web applications.

# Benchmarking with HTTPerf.js and NodeUnit

I covered this in the [HTTPerf.js README](/projects/npms/httperfjs) a bit, but wanted to take a deeper look at how I use [HTTPerf.js](/projects/npms/httperfjs) and [NodeUnit](https://github.com/caolan/nodeunit) to benchmark web applications.

> Note on benchmarking.
>
> I've gone back and forth on using median and 85th percentile when benchmarking. I look at 85th percentile when running load tests and performance tests &mdash; basically when I'm trying to break my site. However, for simple benchmarks like this, median gives you a better perspective.

In my README, I have this basic example. It's pretty simple for small sites, where you want to benchmark just a few endpoints.

`file: benchmark.js`

    :::js
    var HTTPerf = require('httperfjs');
    var httperf = new HTTPerf({
        server:      "mervine.net",
        uri:         "/",
        "num-conns": 9
    });

    var run;

    module.exports = {
        tearDown: function (callback) {
            run = undefined;
            callback();
        },

        'homepage should be quick': function (test) {
            test.expect(1);
            run = httperf.runSync();

            test.ok(run.connection_time_avg < 200,
                "homepage was too slow: got " + run.connection_time_avg
                   + " but expected: < 200");
            test.done();
        },

        'archive should be quick': function (test) {
            test.expect(1);
            httperf.update_option("uri", "/archive");
            run = httperf.runSync();

            test.ok(run.connection_time_median < 200,
                "archive was too slow: got " + run.connection_time_avg
                    + " but expected: < 200");
            test.done();
        }
    };
    // $ ./node_modules/.bin/nodeunit ./benchmark.js

Now, let's pretend we have a real site, with a lot of endpoints that we potentially want to benchmark the performance of. The above will work, but as your list grows it will gradually become harder to maintain. In this example, I build my list of urls using an external `json` file and use a factory function within my test to generate the complete test cases.

`file: tests.json`

    :::js
    [
        { "uri": "/"                 , "expected": 250 },
        { "uri": "/about"            , "expected": 200 },
        { "uri": "/projects"         , "expected": 200 },
        { "uri": "/archive"          , "expected": 200 },
        { "uri": "/archive/2012"     , "expected": 200 },
        { "uri": "/search?q=httperf" , "expected": 1000 }
    ]

`file: benchmark.js`

    :::js
    var testCases = require('./tests.json');
    var HTTPerf = require('httperfjs');
    var httperf = new HTTPerf({
        server:      "mervine.net",
        uri:         "/",
        "num-conns": 9
    });
    var run;
    function testFactory(uri, expected) {
        tests['"' + uri + '" should be less then ' + expected] = function (test) {
            test.expect(1);
            httperf.update_option("uri", uri);
            run = httperf.runSync();
            test.ok(run.connection_time_median < expected,
                "too slow: got " + run.connection_time_median
                    + " but expected: < " + expected);
            test.done();
        };
    }
    var tests = {
        tearDown: function (callback) {
            run = undefined;
            callback();
        },
    };
    testCases.forEach( function (testCase) {
        testFactory(testCase.uri, testCase.expected);
    });
    module.exports = tests;
    // $ ./node_modules/.bin/nodeunit ./benchmark.js


This should generate some simple and pretty output like so:

    benchmark.js
    ✔ "/" should be less then 250
    ✔ "/about" should be less then 200
    ✔ "/projects" should be less then 200
    ✔ "/archive" should be less then 200
    ✔ "/archive/2012" should be less then 200
    ✔ "/search?q=httperf" should be less then 1000

    OK: 6 assertions (13445ms)

Enjoy!
